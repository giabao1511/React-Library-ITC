#!@ Author: Nguyễn Tiến Tài.
#! Description: Docker Compose Dev
#!@ Created_At : 20-12-2022.
#!@ Update_At: 21-12-2022, 22-12-2022, 16-01-2023, 12-03-2023, 18-03-2023.
#!@ Updated_At: 12-04-2023

version: '3.7'

services:
    ###! admin_api ###
    admin_api:
        container_name: server_admin_api
        depends_on:
            - redis-master
            - redis-slave
            - postgresql
        restart: always
        build:
            dockerfile: Dockerfile.dev
            context: .
        environment:
            NODE_ENV: DEVELOPER
        ports:
            - ${PORT_ADMIN_API}:${PORT_ADMIN_API}
        volumes:
            - './src:/usr/src/app/src'
        env_file:
            - .env
        command: npm run admin:dev
        networks:
            - libary_school

    ###! user_api ###
    user_api:
        container_name: server_user_api
        depends_on:
            - redis-master
            - redis-slave
            - postgresql
        restart: always
        build:
            dockerfile: Dockerfile.dev
            context: .
        environment:
            NODE_ENV: DEVELOPER
        ports:
            - ${PORT_USER_API}:${PORT_USER_API}
        volumes:
            - './src:/usr/src/app/src'
        env_file:
            - .env
        command: npm run user:dev
        networks:
            - libary_school

    ###! cront general ###
    cron_job:
        container_name: cron_job
        build:
            dockerfile: Dockerfile.dev
            context: .
        depends_on:
            - redis-master
            - redis-slave
            - postgresql
        restart: always
        environment:
            NODE_ENV: DEVELOPER
        volumes:
            - './src:/usr/src/app/src'
        env_file:
            - .env
        command: npm run cron:dev
        networks:
            - libary_school

    ###! Redis Master ###
    redis-master:
        container_name: redis-master
        image: redis
        build:
            dockerfile: dockerfile.redis.dev
            context: .
        restart: always
        environment:
            REDIS_PASSWORD: '${REDIS_PASSWORD}'
            TZ: '${TIME_DATE_TZ}'
        command: sh -c "redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD} --maxmemory ${MAXMEMORY} & cd /usr/local/bin/scrip && ./scrip_redis.sh && logrotate /usr/local/bin/logs/logrotate.conf"
        env_file:
            - .env
        volumes:
            - redis-master:/data
            - ./setup:/usr/local/etc/redis/redis.conf
            - ./scrip:/usr/local/bin/scrip
            - ./scrip:/usr/local/bin/logs
        ports:
            - ${REDIS_PORT}:${REDIS_PORT}
        networks:
            - libary_school
            - server-send-email-student_sendemail
            - server-media-service_upload-network
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 30s
            timeout: 10s
            retries: 5

    ###! Redis Slave from Master ###
    redis-slave:
        container_name: redis-slave
        depends_on:
            - redis-master
        environment:
            REDIS_PASSWORD: ${REDIS_PASSWORD_SLAVE}
        restart: always
        image: redis
        volumes:
            - redis-slave:/data
        ports:
            - ${REDIS_PORT_SLAVE}:${REDIS_PORT}
        env_file:
            - .env
        command: redis-server --slaveof ${REDIS_HOST} ${REDIS_PORT} --replica-read-only yes --masterauth ${REDIS_PASSWORD}  --requirepass ${REDIS_PASSWORD_SLAVE}
        links:
            - redis-master
        networks:
            - libary_school
        healthcheck:
            test:
                [
                    'CMD',
                    'redis-cli',
                    '-h',
                    '${REDIS_HOST_SLAVE}',
                    '-a',
                    '${REDIS_PASSWORD}',
                    redis-slave',
                    '-p',
                    '${REDIS_PORT_SLAVE}',
                    'PING',
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 20s

    ###! postgresql ###
    postgresql:
        container_name: postgresql
        # build:
        #     context: .
        #     dockerfile: Dockerfile.postgres.dev
        image: postgres:12
        restart: unless-stopped
        environment:
            POSTGRES_DB: '${POSTGRES_DB}'
            POSTGRES_USER: '${POSTGRES_USER}'
            POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
        volumes:
            - db_data:/var/lib/postgresql/data
            - ./migrations/init:/docker-entrypoint-initdb.d
        ports:
            - ${POSTGRES_PORT_EDIT}:${POSTGRES_PORT}
        env_file:
            - .env
        networks:
            - libary_school
            - server-media-service_upload-network
        healthcheck:
            test: ['CMD-SHELL', "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
            interval: 10s
            timeout: 3s
            retries: 3

    ###! mongo
    mongodb:
        container_name: mongodb
        image: mongo:latest
        build:
            context: .
            dockerfile: dockerfile.mongo
        restart: unless-stopped
        environment:
            MONGO_INITDB_ROOT_USERNAME: '${MONGO_INITDB_ROOT_USERNAME}'
            MONGO_INITDB_ROOT_PASSWORD: '${MONGO_INITDB_ROOT_PASSWORD}'
            MONGO_INITDB_DATABASE: '${MONGO_INITDB_DATABASE}'
        volumes:
            - mongo_db_data:/data/db
        ports:
            - ${MONGO_INITDB_PORT}:${MONGO_INITDB_PORT}
        env_file:
            - .env
        networks:
            - libary_school
        healthcheck:
            test:
                [
                    'CMD',
                    'mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --eval "printjson(db.serverStatus())"',
                ]
            interval: 10s
            timeout: 3s
            retries: 3

    ###! WebServer:NGINX ###
    nginx:
        image: nginx:1.21.3
        container_name: nginx_libary_school
        depends_on:
            - postgresql
            - mongodb
            - redis-master
            - redis-slave
            - admin_api
            - user_api
            - cron_job
        restart: always
        build:
            dockerfile: Dockerfile.dev
            context: ../server-gateway/nginx
        ports:
            - '${PORT_NGINX_SERVER}'
        env_file:
            - .env
        networks:
            - libary_school
            - server-send-email-student_sendemail
            - server-media-service_upload-network

###! NETWORD GENERAL ###
networks:
    libary_school:
        driver: bridge
    server-send-email-student_sendemail:
        external: true
    server-media-service_upload-network:
        external: true
volumes:
    db_data:
        driver: local
    mongo_db_data:
        driver: local
    frontend-manager-student:
        driver: local
    redis-master:
        driver: local
    redis-slave:
        driver: local
